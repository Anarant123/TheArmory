@page
@model Index

@{
    ViewData["Title"] = "Публикация";
}
<style>
    .btn-block {
        width: 100%;
    }
    
    #image-area {
        width: 100%;
        height: 500px;
        overflow: hidden;
        position: relative;
    }
    
    #image-area img {
        width: auto;
        height: 100%;
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        margin: auto;
    }
    
    .image-cell {
        width: 100px; /* Ширина ячейки */
        height: 100px; /* Высота ячейки */
        overflow: hidden; /* Скрытие избыточного контента */
        display: flex; /* Использование flexbox */
        align-items: center; /* Выравнивание по вертикали */
        justify-content: center; /* Выравнивание по горизонтали */
        margin: 0; /* Убираем отступы между ячейками */
        }
    
    .image-cell img {
        max-width: 100%; /* Максимальная ширина изображения внутри ячейки */
        max-height: 100%; /* Максимальная высота изображения внутри ячейки */
        width: auto; /* Автоматическое вычисление ширины для сохранения пропорций */
        height: auto; /* Автоматическое вычисление высоты для сохранения пропорций */
        }
            
    .marker-container {
        position: relative; /* Делаем контейнер относительным, чтобы позиционировать маркер внутри него */
        width: 100%; /* Ширина контейнера должна соответствовать ширине карты */
        height: 100%; /* Высота контейнера должна соответствовать высоте карты */
    }
    
    .marker {
        position: absolute; /* Позиционируем маркер абсолютно относительно контейнера */
        top: 50%; /* Располагаем маркер по вертикали на 50% относительно контейнера */
        left: 50%; /* Располагаем маркер по горизонтали на 50% относительно контейнера */
        transform: translate(-50%, -50%); /* Центрируем маркер относительно его собственных размеров */
        margin-top: -220px;
    }
        
</style>

<form method="post" enctype="multipart/form-data" id="form">
    <div class="row mt-3">
        <div class="col-md-12">

            <div class="row">
                <h1>Параметры</h1>
                <div class="row mt-3">
                    <div class="col-3">
                        <label asp-for="Command.Name" class="form-label">Наименование:</label>
                    </div>
                    <div class="col-9">
                        <input type="text" asp-for="Command.Name" class="form-control" placeholder="Введите наименование" maxlength="255">
                        <span asp-validation-for="Command.Name" class="text-danger"></span>
                    </div>
                </div>

                <div class="row mt-3">
                    <div class="col-3">
                        <label asp-for="Command.ConditionId" class="form-label">Состояние:</label>
                    </div>
                    <div class="col-9">
                        <select asp-for="Command.ConditionId" class="form-control" id="conditionId" name="Command.ConditionId">
                            @foreach (var condition in Model.Conditions)
                            {
                                <option value="@condition.Id">@condition.Name</option>
                            }
                        </select>
                    </div>
                </div>
            </div>

            <div class="row">
                <h1>Подробности</h1>
                <div class="row mt-3">
                    <div class="col-3">
                        <label asp-for="Command.Description" class="form-label">Описание:</label>
                    </div>
                    <div class="col-9">
                        <textarea asp-for="Command.Description" class="form-control" placeholder="Введите описание" oninput="autoResize(this)" maxlength="2000"></textarea>
                        <span asp-validation-for="Command.Description" class="text-danger"></span>
                    </div>
                </div>
                <div class="row mt-3">
                    <div class="col-3">
                        <label asp-for="Command.Price" class="form-label">Цена:</label>
                    </div>
                    <div class="col-9">
                        <input type="text" asp-for="Command.Price" class="form-control" placeholder="Введите цену" oninput="validatePrice(this)">
                        <span asp-validation-for="Command.Price" class="text-danger"></span>
                    </div>
                </div>
            </div>

            <div class="row">
                <h1 id="photoCountHeader">Фотографии (0 из 5)</h1>
                <div class="row mt-3">
                    <div class="col-md-1 text-center d-flex align-items-center justify-content-center">
                        <button type="button" class="btn btn-secondary h-50" onclick="prevImage()">&#60;</button>
                    </div>
                    <div class="col-md-10 text-center">
                        <div id="image-area" class="position-relative">
                            <img id="current-image" src="/Default/Images/Ad/DefoultAdImage.png" alt="Image" class="img-fluid">
                        </div>
                    </div>
                    <div class="col-md-1 text-center d-flex align-items-center justify-content-center">
                        <button type="button" class="btn btn-secondary h-50" onclick="nextImage()">&#62;</button>
                    </div>
                </div>
                <div class="row mt-3">
                    <div class="col-md-1 text-center"></div>
                    <div class="col-md-5 text-center">
                        <label class="btn btn-primary btn-block">
                            Добавить
                            <input type="file" id="file-input" asp-for="Command.Photos" accept="image/*" multiple="multiple" style="display: none;">
                        </label>
                    </div>
                    <div class="col-md-5 text-center">
                        <button type="button" class="btn btn-danger btn-block">Удалить</button>
                    </div>
                    <div class="col-md-1 text-center"></div>
                </div>

                <!-- Контейнер для ячеек с изображениями -->
                <div id="thumbnails-container" class="row mt-3 justify-content-center"></div>

            </div>

            <div class="row">
                <h1>Видео</h1>
                <div class="row mt-3">
                    <div class="col-3">
                        <label asp-for="Command.YouTubeLink" class="form-label">Ссылка на YouTube видео с обзором:</label>
                    </div>
                    <div class="col-9">
                        <div class="row">
                            <input type="text" asp-for="Command.YouTubeLink" class="form-control" placeholder="Введите ссылку на YouTube видео">
                            <span asp-validation-for="Command.YouTubeLink" class="text-danger"></span>
                        </div>
                        <div id="youtubeVideo" class="row mt-3" style="display: none;">
                            <iframe id="videoFrame" width="560" height="315" frameborder="0" allowfullscreen></iframe>
                        </div>
                    </div>
                </div>

            </div>

            <div class="row">
                <h1>Место сделки</h1>
                <p class="text-muted">(Добавьте данный параметр он поможет привлечь заинтересованных покупателей)</p>
                <div class="row mt-3">
                    <div class="col">
                        <button type="button" class="btn btn-primary" data-bs-toggle="collapse" data-bs-target="#mapCollapse" aria-expanded="false" aria-controls="mapCollapse">
                            Показать карту
                        </button>
                    </div>
                </div>
            </div>

            <div class="collapse" id="mapCollapse">
                <div class="row mt-3">
                    <div class="col">
                        <input type="hidden" id="latitude" asp-for="Command.Latitude" class="d-none">
                        <input type="hidden" id="longitude" asp-for="Command.Longitude" class="d-none">
                        <div class="map-container">
                            <div id="map" class="square" style="height: 400px"></div>
                            <div class="marker-container">
                                <img src="/icons/map_marker.png" class="marker" alt=""/>
                            </div>
                        </div>
                    </div>
                </div>
            </div>



            <div class="row mt-3">
                <div class="col">
                    <button type="submit" class="btn btn-primary btn-block">Добавить</button>
                </div>
                <div class="col">
                    <button type="button" class="btn btn-danger btn-block">Отменить и выйти</button>
                </div>
            </div>


        </div>
    </div>
</form>

<script src="https://api-maps.yandex.ru/2.1/?apikey=d8ed85d4-a4d3-4811-895b-20643a517a47&lang=ru_RU" type="text/javascript"></script>
<script src="https://api-maps.yandex.ru/2.1/?apikey=d8ed85d4-a4d3-4811-895b-20643a517a47&lang=ru_RU" type="text/javascript"></script>
<script type="text/javascript">

        var latitude = 60;
        var longitude = 60;
        var myMap;

        if ("geolocation" in navigator) {
            // Геолокация доступна
            navigator.geolocation.getCurrentPosition(
                (position) => {
                    latitude = position.coords.latitude; // Получение широты
                    longitude = position.coords.longitude; // Получение долготы
                    console.log("Latitude: " + latitude + ", Longitude: " + longitude);
                    initializeMap(latitude, longitude); // Загрузка карты с полученными координатами
                },
                (error) => {
                    // Обработка ошибок получения геопозиции
                    console.error("Ошибка при получении геопозиции:", error);
                }
            );
        } else {
            // Геолокация не поддерживается
            console.error("Геолокация недоступна");
        }

        function initializeMap(latitude, longitude) {
            // Функция ymaps.ready() будет вызвана, когда
            // загрузятся все компоненты API, а также когда будет готово DOM-дерево.
            ymaps.ready(function () {
                // Создание карты.
                myMap = new ymaps.Map("map", {
                    // Координаты центра карты.
                    // Порядок по умолчанию: «широта, долгота».
                    // Чтобы не определять координаты центра карты вручную,
                    // воспользуйтесь инструментом Определение координат.
                    center: [latitude, longitude],
                    // Уровень масштабирования. Допустимые значения:
                    // от 0 (весь мир) до 19.
                    zoom: 7
                });

                // Создание метки и добавление её на карту.
                var myGeoObject = new ymaps.GeoObject({
                    geometry: {
                        type: "Point", // тип геометрии - точка
                        coordinates: [latitude, longitude] // координаты точки
                    }
                });
                myMap.geoObjects.add(myGeoObject);

                // Добавляем обработчик события перемещения карты
                myMap.events.add('boundschange', function (event) {
                    // Получаем новые координаты центра карты
                    var newCenter = event.get('newCenter');
                    latitude = newCenter[0];
                    longitude = newCenter[1];
                    // Обновляем координаты метки
                    myGeoObject.geometry.setCoordinates([latitude, longitude]);
                    let latitudeInfo = document.getElementById('latitude');
                    latitudeInfo.value = latitude;
                    let longitudeInfo = document.getElementById('longitude');
                    longitudeInfo.value = longitude;
                });

                // // Добавляем обработчик события перемещения карты
                // myMap.events.add('actiontick', function (event) {
                //     // Получаем координаты центра карты
                //     var newCenter = myMap.getCenter();
                //     latitude = newCenter[0];
                //     longitude = newCenter[1];
                //     // Обновляем координаты метки
                //     myGeoObject.geometry.setCoordinates([latitude, longitude]);
                // });
            });
        }

    </script>


<script>
    function autoResize(textarea) {
        textarea.style.height = 'auto'; // Устанавливаем высоту текстового поля в режиме авто
        textarea.style.height = (textarea.scrollHeight) + 'px'; // Устанавливаем высоту текстового поля равной его высоте контента
    }
    
    function validatePrice(input) {
        input.value = input.value.replace(/[^0-9.]/g, ''); // Заменяем все символы, кроме цифр и точки, на пустую строку
        // Удалить лишние точки
        var countDots = (input.value.match(/\./g) || []).length; // Подсчитываем количество точек в значении поля ввода
        if (countDots > 1) { // Если количество точек больше 1
            input.value = input.value.replace(/\./g, ''); // Удаляем все точки из значения поля ввода, кроме первой
        }
    }
    
    let images = []; 
    let currentImageIndex = 0;
    
    function prevImage() {
        if (images.length < 2) 
            return; 
        if (currentImageIndex > 0) { 
            currentImageIndex--; 
        } else { 
            currentImageIndex = images.length - 1; 
        }
        updateImage(); 
    }
    
    function nextImage() {
        if (images.length < 2)
            return;
        if (currentImageIndex < images.length - 1) { 
            currentImageIndex++; 
        } else { 
            currentImageIndex = 0; 
        }
        updateImage(); 
    }
    
    function updateImage() {
        let image = document.getElementById("current-image");
        let blob = new Blob([new Uint8Array(images[currentImageIndex])], { type: 'image/jpeg' });
        image.src = URL.createObjectURL(blob);
    }
    
    function handleFileSelect(event) {
        if (images.length >= 5) {
            alert("Вы уже добавили максимальное количество изображений.");
            return;
        }
    
        let files = event.target.files;
        let thumbnailsContainer = document.getElementById('thumbnails-container');
        let numberOfImagesToAdd = Math.min(files.length, 5 - images.length);
        let numberOfImagesAdded = 0;
    
        for (let i = 0; i < files.length && numberOfImagesAdded < numberOfImagesToAdd; i++) {
            let reader = new FileReader();
            reader.onload = function (e) {
                let arrayBuffer = e.target.result;
    
                images.push(arrayBuffer);
    
                let thumbnailContainer = document.createElement('div');
                thumbnailContainer.className = 'col-md text-center image-cell position-relative';
                let thumbnail = document.createElement('img');
                thumbnail.className = 'img-thumbnail img-fluid';
    
                let blob = new Blob([new Uint8Array(arrayBuffer)], { type: 'image/jpeg' });
                thumbnail.src = URL.createObjectURL(blob);
    
                thumbnailContainer.appendChild(thumbnail);
                thumbnailsContainer.appendChild(thumbnailContainer);
    
                numberOfImagesAdded++;
                currentImageIndex = images.length - 1;
                updateImage();
    
                if (images.length === 5) {
                    document.querySelectorAll('.image-controls').forEach(function (element) {
                        element.style.display = 'flex';
                    });
                }
            };
            reader.readAsArrayBuffer(files[i]);
        }
    
        
        document.getElementById('photoCountHeader').textContent = `Фотографии (${images.length + 1} из 5)`;
    }

    document.getElementById('file-input').addEventListener('change', handleFileSelect, false); // Добавляем обработчик события change на элементе file-input
    
    function removeImage(index) {
        images.splice(index, 1); // Удаляем изображение из массива по указанному индексу
        let thumbnailsContainer = document.getElementById('thumbnails-container');
        thumbnailsContainer.removeChild(thumbnailsContainer.childNodes[index]); // Удаляем соответствующий блок с миниатюрой изображения из контейнера
        if (currentImageIndex === index) {
            if (currentImageIndex === images.length) {
                currentImageIndex--; // Переключаемся на предыдущее изображение, если удалено было последнее
            }
            updateImage(); // Обновляем отображение после удаления
        } else if (currentImageIndex > index) {
            currentImageIndex--; // Корректируем текущий индекс, если он находится после удаленного изображения
        }
        if (images.length < 5) { // Если теперь в массиве images меньше 5 изображений, скрываем кнопки управления
            document.querySelectorAll('.image-controls').forEach(function (element) {
                element.style.display = 'none';
            });
        }
        
        document.getElementById('photoCountHeader').textContent = `Фотографии (${images.length} из 5)`;
    }
    document.querySelector('.btn-danger').addEventListener('click', function () {
        removeImage(currentImageIndex);
    });

    // Получаем ссылку на поле ввода и элемент iframe
    const youtubeLinkInput = document.getElementById('Command_YouTubeLink');
    const videoFrame = document.getElementById('videoFrame');
    
    // Добавляем обработчик события изменения значения поля ввода
    youtubeLinkInput.addEventListener('input', function() {
        // Получаем значение поля ввода
        let youtubeLink = youtubeLinkInput.value.trim();
    
        // Проверяем, не является ли введенная ссылка пустой
        if (youtubeLink === '') {
            // Если ссылка пустая, скрываем контейнер с видео и очищаем src для iframe
            document.getElementById('youtubeVideo').style.display = 'none';
            videoFrame.src = '';
            return;
        }
    
        // Регулярное выражение для проверки корректности ссылки на видео YouTube
        let youtubeRegExp = /^(https?\:\/\/)?(www\.youtube\.com|youtu\.?be)\/.+$/;
    
        // Проверяем, соответствует ли введенная ссылка формату ссылки на видео YouTube
        if (youtubeRegExp.test(youtubeLink)) {
            // Показываем контейнер с видео
            document.getElementById('youtubeVideo').style.display = 'block';
            // Получаем идентификатор видео
            let videoId = getYoutubeVideoId(youtubeLink);
            console.log('Идентификатор видео:', videoId);
            // Проверяем, есть ли идентификатор видео
            if (videoId) {
                // Формируем URL для вставки видео
                let embedUrl = `https://www.youtube.com/embed/${videoId}`;
                // Устанавливаем src для iframe
                videoFrame.src = embedUrl;
            } else {
                console.error('Не удалось извлечь идентификатор видео из ссылки.');
                // Если не удалось извлечь идентификатор видео, скрываем контейнер с видео
                document.getElementById('youtubeVideo').style.display = 'none';
                // Очищаем src для iframe
                videoFrame.src = '';
            }
        } else {
            console.error('Введенная ссылка не соответствует формату ссылки на видео YouTube.');
            // Если ссылка не соответствует формату ссылки на видео YouTube, скрываем контейнер с видео
            document.getElementById('youtubeVideo').style.display = 'none';
            // Очищаем src для iframe
            videoFrame.src = '';
        }
    });
    
    // Функция для извлечения идентификатора видео YouTube из ссылки
    function getYoutubeVideoId(url) {
        let videoId = '';
        // Регулярное выражение для извлечения идентификатора видео из ссылки
        let regExp = /^(https?\:\/\/)?(www\.youtube\.com|youtu\.?be)\/(.+)$/;
        // Проверяем, соответствует ли ссылка формату ссылки на видео YouTube
        if (regExp.test(url)) {
            // Извлекаем идентификатор видео
            let match = url.match(regExp);
            if (match && match[3]) {
                videoId = match[3];
            }
        }
        return videoId;
    }
    
</script>