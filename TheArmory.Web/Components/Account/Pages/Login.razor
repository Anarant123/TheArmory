@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using Microsoft.AspNetCore.Identity
@using TheArmory.Domain.Models.Database
@using TheArmory.Domain.Models.Request.Commands.User
@using TheArmory.Web.Data
@using TheArmory.Web.Services

@inject SignInManager<ApplicationUser> SignInManager
@inject AuthSevice authService
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Вход</PageTitle>

<h1>Вход</h1>
<div class="row">
    <div class="col-md-4">
        <section>
            <StatusMessage Message="@errorMessage"/>
            <EditForm Model="Command" method="post" OnValidSubmit="LoginUser" FormName="login">
                <DataAnnotationsValidator/>
                <h2>Используйте свою учетную запись для входа.</h2>
                <hr/>
                <ValidationSummary class="text-danger" role="alert"/>
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Command.Login" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com"/>
                    <label for="email" class="form-label">Email</label>
                    <ValidationMessage For="() => Command.Password" class="text-danger"/>
                </div>
                <div class="form-floating mb-3">
                    <InputText type="password" @bind-Value="Command.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="password"/>
                    <label for="password" class="form-label">Password</label>
                    <ValidationMessage For="() => Command.Password" class="text-danger"/>
                </div>
                <div class="checkbox mb-3">
                    <label class="form-label">
                        <InputCheckbox @bind-Value="Command.RememberMe" class="darker-border-checkbox form-check-input"/>
                        Запомнить меня
                    </label>
                </div>
                <div>
                    <button type="submit" class="w-100 btn btn-lg btn-primary mb-3">Log in</button>
                </div>
                <div>
                    <p>
                        <a href="Account/ForgotPassword">Забыли пароль?</a>
                    </p>
                    <p>
                        <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">Зарегистрироваться</a>
                    </p>
                    <p>
                        <a href="Account/ResendEmailConfirmation">Повторно отправить подтверждение по электронной почте</a>
                    </p>
                </div>
            </EditForm>
        </section>
    </div>
    <div class="col-md-6 col-md-offset-2">
        <section>
            <h3>Use another service to log in.</h3>
            <hr/>
            <ExternalLoginPicker/>
        </section>
    </div>
</div>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private UserLoginCommand Command { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
    // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        var result = await authService.Login(Command);
        if (result?.Success == false)
        {
            errorMessage = "Неудачная попытка авторизации";
        }
        await SetLoginClaims(result.Item);
        HttpContext.Session.SetString("role", result.Item.Name);
        RedirectManager.RedirectTo(ReturnUrl);
        //if (result.)

    // // This doesn't count login failures towards account lockout
    // // To enable password failures to trigger account lockout, set lockoutOnFailure: true
    //     var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
    //     if (result.Succeeded)
    //     {
    //         Logger.LogInformation("User logged in.");
    //         RedirectManager.RedirectTo(ReturnUrl);
    //     }
    //     else if (result.RequiresTwoFactor)
    //     {
    //         RedirectManager.RedirectTo(
    //             "Account/LoginWith2fa",
    //             new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
    //     }
    //     else if (result.IsLockedOut)
    //     {
    //         Logger.LogWarning("User account locked out.");
    //         RedirectManager.RedirectTo("Account/Lockout");
    //     }
    //     else
    //     {
    //         errorMessage = "Error: Invalid login attempt.";
    //     }
    }
    
    public async Task SetLoginClaims(User user)
    {
        var claims = new List<Claim>()
        {
            new("Id", user?.Id.ToString() ?? string.Empty),
            new(ClaimTypes.Name, user?.Email ?? string.Empty),
            new("Email", user?.Email ?? string.Empty),
            new(ClaimTypes.Role, user?.Role.ToString() ?? string.Empty),
            new("Status", user?.Status.ToString() ?? string.Empty)
        };

        var claimsIdentity = new ClaimsIdentity(
            claims, CookieAuthenticationDefaults.AuthenticationScheme);
        var authProperties = new AuthenticationProperties()
        {
        };

        await HttpContext.SignInAsync(
            CookieAuthenticationDefaults.AuthenticationScheme,
            new ClaimsPrincipal(claimsIdentity),
            authProperties);
    }
}